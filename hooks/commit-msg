#!/bin/bash

# Define commit format regex
commit_msg_regex="^(feat|fix|docs|style|refactor|perf|test|chore|revert)\((\*|(((frontend|backend|deploy|docs)(,( )?(frontend|backend|deploy|docs))*)))\): .{1,50}$"

# Read commit message from stdin
commit_msg=$(cat)

# Check commit format
if ! [[ $commit_msg =~ $commit_msg_regex ]]; then
    echo "Invalid commit message format. Please follow the format: <type>(<scope>): <subject>" >&2
    echo -e "\n<type> has the following options:" >&2
    echo -e "\tfeat: add new features" >&2
    echo -e "\tfix: fix bugs" >&2
    echo -e "\tdocs: modify documents, such as README, CHANGELOG, etc." >&2
    echo -e "\tstyle: modify the format, including comments, code format, commas, etc., without affecting code running" >&2
    echo -e "\trefactor: code refactoring without adding new features or fixing bugs" >&2
    echo -e "\tperf: optimization related, such as improving performance and experience" >&2
    echo -e "\ttest: test cases, including unit tests, integration tests, etc." >&2
    echo -e "\tchore: change the build process, or add dependent libraries, tools, etc." >&2
    echo -e "\trevert: roll back to the previous version" >&2
    echo -e "\n<scope> has the following options: frontend, backend, deploy, docs, * (if multiple are involved)" >&2
    exit 1
else
    exit 0
fi